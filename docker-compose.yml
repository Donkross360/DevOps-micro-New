version: '3.8'

# DEVELOPMENT ONLY - For production use Kubernetes manifests
# ---------------------------------------------------------

# Frontend Selection (dev only):
# Use --profile react for React frontend (default)
# Use --profile html for HTML frontend
# Example: docker-compose --profile html up

services:
  frontend-react:
    build: ./frontend-react
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://auth:4000
      - REACT_APP_BACKEND_URL=http://backend:5000
    volumes:
      - ./frontend-react:/app
      - /app/node_modules
    depends_on:
      - backend
      - auth
    stdin_open: true
    tty: true
    profiles: ["react"]

  frontend-html:
    build: 
      context: ./frontend-html
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    volumes:
      - ./frontend-html:/usr/share/nginx/html
    depends_on:
      - backend
      - auth
    profiles: ["html"]

  # Default services (always run)
  backend:
    image: backend:latest
    build: ./backend
    ports:
      - "5000:5000"
      - "5443:5443"
    environment:
      - SSL_CERT=/certs/cert.pem
      - SSL_KEY=/certs/key.pem
    volumes:
      - ./certs:/certs
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      auth:
        condition: service_started
      user:
        condition: service_started
      payment:
        condition: service_started

  auth:
    image: auth:latest
    build: ./services/auth
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES=${JWT_EXPIRES}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./services/auth:/app

  user:
    image: user:latest
    ports:
      - "6000:6000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./user:/app

  payment:
    image: payment:latest
    ports:
      - "7000:7000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./payment:/app

  db:
    build: ./services/db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:

networks:
  default:
    driver: bridge
    name: app_network
    attachable: true
